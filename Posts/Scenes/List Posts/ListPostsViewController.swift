//
//  ListPostsViewController.swift
//  ShorterMethods
//
//  Created by Raymond Law on 1/11/16.
//  Copyright (c) 2016 Raymond Law. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ListPostsViewControllerInput
{
  func displayFetchFollowerPosts(viewModel: ListPosts_FetchFollowerPosts_ViewModel)
  func displayFetchFollowerPostsFetchError(viewModel: ListPosts_FetchFollowerPosts_ViewModel)
  func displayFetchFollowerPostsLoginError(viewModel: ListPosts_FetchFollowerPosts_ViewModel)
}

protocol ListPostsViewControllerOutput
{
  func fetchFollowerPosts(request: ListPosts_FetchFollowerPosts_Request)
}

class ListPostsViewController: UIViewController, ListPostsViewControllerInput, UITableViewDataSource
{
  var output: ListPostsViewControllerOutput!
  var router: ListPostsRouter!
  
  @IBOutlet weak var loginButton: UIButton!
  @IBOutlet weak var tableView: UITableView!
  
  var posts: [ListPosts_FetchFollowerPosts_ViewModel.Post] = []
  
  // MARK: Object lifecycle
  
  override func awakeFromNib()
  {
    super.awakeFromNib()
    ListPostsConfigurator.sharedInstance.configure(self)
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    fetchFollowerPostsOnLoad()
  }
  
  // MARK: Fetch follower Posts
  
  private func fetchFollowerPostsOnLoad()
  {
    let request = ListPosts_FetchFollowerPosts_Request()
    output.fetchFollowerPosts(request)
  }
  
  // MARK: Display fetch follower posts or errors
  
  func displayFetchFollowerPosts(viewModel: ListPosts_FetchFollowerPosts_ViewModel)
  {
    if let posts = viewModel.posts {
      refreshFollowerPosts(posts)
      hideLoginButton()
    }
  }
  
  func displayFetchFollowerPostsFetchError(viewModel: ListPosts_FetchFollowerPosts_ViewModel)
  {
    if let error = viewModel.error {
      clearFollowerPosts()
      hideLoginButton()
      showAlert(error)
    }
  }
  
  func displayFetchFollowerPostsLoginError(viewModel: ListPosts_FetchFollowerPosts_ViewModel)
  {
    if let _ = viewModel.error {
      showLoginButton()
    }
  }
  
  // MARK: Show/clear posts in table view
  
  private func refreshFollowerPosts(posts: [ListPosts_FetchFollowerPosts_ViewModel.Post])
  {
    self.posts = posts
    tableView.reloadData()
  }
  
  private func clearFollowerPosts()
  {
    self.posts = []
    tableView.reloadData()
  }
  
  // MARK: Show fetch error
  
  private func showAlert(error: String)
  {
    // ...
  }
  
  // MAARK: Show/hide login button
  
  private func showLoginButton()
  {
    loginButton.hidden = false
  }
  
  private func hideLoginButton()
  {
    loginButton.hidden = true
  }
  
  // MARK: Table view
  
  func numberOfSectionsInTableView(tableView: UITableView) -> Int
  {
    return 1
  }
  
  func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  {
    return posts.count
  }
  
  func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell
  {
    let post = posts[indexPath.row]
    let cell = tableView.dequeueReusableCellWithIdentifier("PostCell")!
    cell.textLabel?.text = post.title
    cell.detailTextLabel?.text = post.publishedOn
    return cell
  }
}
