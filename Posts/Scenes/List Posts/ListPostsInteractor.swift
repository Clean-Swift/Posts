//
//  ListPostsInteractor.swift
//  ShorterMethods
//
//  Created by Raymond Law on 1/11/16.
//  Copyright (c) 2016 Raymond Law. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ListPostsInteractorInput
{
  func fetchFollowerPosts(request: ListPosts_FetchFollowerPosts_Request)
}

protocol ListPostsInteractorOutput
{
  func presentFetchFollowerPosts(response: ListPosts_FetchFollowerPosts_Response)
}

class ListPostsInteractor: ListPostsInteractorInput
{
  var output: ListPostsInteractorOutput!
  var worker = ListPostsWorker()
  
  let userManager = UserManager()
  
  var recentPosts = [Post]()
  
  // MARK: Follower Posts
  
  func fetchFollowerPosts(request: ListPosts_FetchFollowerPosts_Request)
  {
    if let currentUser = userManager.loggedInUser() {
      let followers = userManager.followersForUser(currentUser)
      worker.fetchPostsByAllFollowers(followers, completionHandler: { (posts: [Post]?, error: PostManagerError?) -> () in
        if let error = error {
          self.handleFetchPostsByAllFollowersFailure(error)
        } else if let posts = posts {
          self.handleFetchPostsByAllFollowersSuccess(posts)
        }
      })
    } else {
      handleLoggedInUserNotExist()
    }
  }
  
  private func handleFetchPostsByAllFollowersSuccess(posts: [Post])
  {
    let posts = Array(posts.sort { $0 > $1 }.prefix(5))
    let response = ListPosts_FetchFollowerPosts_Response(posts: posts, error: nil)
    output.presentFetchFollowerPosts(response)
  }
  
  private func handleFetchPostsByAllFollowersFailure(err: PostManagerError)
  {
    let error: ListPosts_FetchFollowerPosts_Error
    switch err {
    case .CannotFetch(let msg):
      error = ListPosts_FetchFollowerPosts_Error.CannotFetch(msg: msg)
    }
    let response = ListPosts_FetchFollowerPosts_Response(posts: nil, error: error)
    output.presentFetchFollowerPosts(response)
  }
  
  private func handleLoggedInUserNotExist()
  {
    let error = ListPosts_FetchFollowerPosts_Error.NotLoggedIn(msg: "User is not logged in")
    let response = ListPosts_FetchFollowerPosts_Response(posts: nil, error: error)
    output.presentFetchFollowerPosts(response)
  }
}
